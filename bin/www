#!/usr/bin/env node

import http from 'http';
import debugLib from 'debug';
import app from '../app.js';
import { Server } from 'socket.io';
import logger from '../utils/logger.js';
import { connectToDb, initializeDbSchema } from '../config/db.js';
import {seedSampleProvidersAndSlots} from '../config/sampleProviders.js'

const debug = debugLib('appointment-backend-api:server');

/**
 * Get port from environment and store in Express.
 */
let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

// /**
//  * Listen on provided port, on all network interfaces.
//  */
// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


const signals = {
  'SIGHUP': 1,
  'SIGINT': 2,
  'SIGTERM': 15
}

let shuttingDown = false

const shutdown = (signal, value) => {
  if(shuttingDown) {
    logger.info(`Already shutting down. Received ${signal} again`)
    return
  }

  shuttingDown = true
  logger.info(`Received ${signal}. Shutting down gracefully`)

  server.close((err) => {
    if(err) {
      logger.error("Error closing  server", err)
      process.exit(1)
    }
    else {
      logger.info('Server closed. Exiting the process')
      process.exit(0)
    }
  })
}

Object.keys(signals).forEach((signal) => {
  process.on(signal, () => {
    logger.info("Received", signal)
    shutdown(signal, signals[signal])
  })
})

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      logger.info("Tring the next port")
      server.listen(port+=1, () => {
        logger.log("Server now listening on port: ", port)
      })
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Sockets with socket.io for real time notifications
 */

const io = new Server(server, {
  cors: {
    origin: "*", // Allow frontend to connect (adjust for production!)
    methods: ["GET", "POST", "PATCH"]
  }
});

app.set('io', io);

// Listen to socket connections
io.on("connection", (socket) => {
  logger.info("User connected:", socket.id);

  // Providers should join their own room (use providerId from frontend)
  socket.on("join_provider_room", (providerId) => {
    socket.join(providerId);
    logger.info(`Provider ${providerId} joined room`);
  });

  socket.on("disconnect", () => {
    logger.info("User disconnected:", socket.id);
  });

});


const startSever = async () => {
  try {
    logger.info(`Attempting to start server on port ${port}`)
    await connectToDb()
    await initializeDbSchema()
    //await seedSampleProvidersAndSlots()
    logger.info(`Starting server on port ${port}`)
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  }
  catch(error) {
    logger.error('Failed during server startup process: ', error)
    process.exit(1)
  }
}

startSever()